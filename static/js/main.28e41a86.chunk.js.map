{"version":3,"sources":["context/ToDoContext.tsx","components/TaskBanner.tsx","components/VisibilityToggler.tsx","components/TaskCreator.tsx","components/TaskRow.tsx","components/ThemeToggler.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToDoContext","createContext","theme","isDark","tasks","showCompleted","changeColor","addTask","deleteTask","toggleTask","toggleCompletedVisibility","ToDoContextProvider","props","setState","state","task","newTask","id","length","Math","max","map","t","description","done","slice","saveLocalTasks","filter","localStorage","setItem","JSON","stringify","savedItems","getItem","localTasks","parse","dark","backgroundColor","color","light","this","Provider","value","children","Component","H4","styled","h4","completed","TaskBanner","todos","useContext","VisibilityToggler","context","className","onClick","e","TaskCreator","useState","text","setText","type","placeholder","onKeyUp","key","toLowerCase","trimmedText","trim","onChange","target","StyledLi","li","TaskRow","checked","ThemeToggler","Consumer","contextType","App","ctx","style","height","overflow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28e41a86.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\nimport { Task } from '../models/models';\n\nexport type ToDoContextType = {\n  theme: any;\n  isDark: boolean;\n  tasks: Task[];\n  showCompleted: boolean;\n  changeColor: () => void;\n  addTask: (task: string) => void;\n  deleteTask: (task: Task) => void;\n  toggleTask: (task: Task) => void;\n  toggleCompletedVisibility: () => void;\n};\n\nexport const ToDoContext = createContext<ToDoContextType>({\n  theme: {},\n  isDark: false,\n  tasks: [],\n  showCompleted: true,\n  changeColor: () => {},\n  addTask: () => {},\n  deleteTask: () => {},\n  toggleTask: () => {},\n  toggleCompletedVisibility: () => {},\n});\n\ninterface State {\n  light: any;\n  dark: any;\n  isDark: boolean;\n  tasks: Task[];\n  showCompleted: boolean;\n}\n\nexport class ToDoContextProvider extends Component<any, State> {\n  constructor(props: any) {\n    super(props);\n    const savedItems = localStorage.getItem('tasks');\n    let localTasks: Task[] = [];\n    if (savedItems) {\n      localTasks = JSON.parse(savedItems);\n    } else {\n      localTasks = [\n        { id: 1, description: 'Task 1', done: false },\n        { id: 2, description: 'Task 2', done: true },\n      ];\n    }\n    this.state = {\n      dark: { backgroundColor: 'grey', color: 'white' },\n      light: { backgroundColor: 'white', color: 'black' },\n      isDark: false,\n      tasks: localTasks,\n      showCompleted: true,\n    };\n  }\n\n  changeColor = () => {\n    this.setState({\n      isDark: !this.state.isDark,\n    });\n  };\n\n  addTask = (task: string) => {\n    const newId = this.state.tasks.length === 0 ? 1 : Math.max(...this.state.tasks.map((t) => t.id)) + 1;\n    const newTask: Task = {\n      id: newId,\n      description: task,\n      done: false,\n    };\n\n    this.setState(\n      {\n        tasks: [...this.state.tasks.slice(), newTask],\n      },\n      () => {\n        this.saveLocalTasks();\n      }\n    );\n  };\n\n  deleteTask = (task: Task) => {\n    this.setState(\n      {\n        tasks: this.state.tasks.filter((t) => t.id !== task.id),\n      },\n      () => {\n        this.saveLocalTasks();\n      }\n    );\n  };\n\n  toggleTask = (task: Task) => {\n    this.setState(\n      {\n        tasks: this.state.tasks.map((t) => (t.id === task.id ? { ...t, done: !t.done } : t)),\n      },\n      () => {\n        this.saveLocalTasks();\n      }\n    );\n  };\n\n  toggleCompletedVisibility = () => {\n    this.setState({\n      showCompleted: !this.state.showCompleted,\n    });\n  };\n\n  saveLocalTasks = () => {\n    localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n  };\n\n  render() {\n    const theme = this.state.isDark ? this.state.dark : this.state.light;\n    return (\n      <ToDoContext.Provider\n        value={{\n          ...this.state,\n          theme,\n          changeColor: this.changeColor,\n          addTask: this.addTask,\n          deleteTask: this.deleteTask,\n          toggleTask: this.toggleTask,\n          toggleCompletedVisibility: this.toggleCompletedVisibility,\n        }}\n      >\n        {this.props.children}\n      </ToDoContext.Provider>\n    );\n  }\n}\n","import { useContext } from 'react';\nimport styled from 'styled-components';\nimport { ToDoContext } from '../context/ToDoContext';\nconst H4 = styled.h4<{ completed: boolean }>`\n  box-sizing: border-box;\n  margin-top: 0;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  line-height: 1.2;\n  font-size: calc(1.275rem + 0.3vw);\n  padding: 1.5rem !important;\n  text-align: center !important;\n  color: #fff !important;\n  transition: background-color 0.25s;\n  background-color: ${(props) => (props.completed ? '#198754' : '#0d6efd')};\n`;\nexport const TaskBanner = () => {\n  const context = useContext(ToDoContext);\n  const todos = context.tasks.filter((t) => !t.done).length;\n  return <H4 completed={todos === 0}>Tasks App ({todos} tasks to do)</H4>;\n};\n","import { useContext, useState } from 'react';\nimport { ToDoContext } from '../context/ToDoContext';\n\nexport const VisibilityToggler = () => {\n  const context = useContext(ToDoContext);\n\n  return (\n    <button className=\"btn btn-sm\"     onClick={(e) => context.toggleCompletedVisibility()}>\n      {context.showCompleted ? 'Hide':'Show'} completed items\n    </button>\n  );\n};\n","import { useContext, useState } from 'react';\nimport { ToDoContext } from '../context/ToDoContext';\nimport { VisibilityToggler } from './VisibilityToggler';\n\nexport const TaskCreator = () => {\n  const context = useContext(ToDoContext);\n  const [text, setText] = useState('');\n\n  const onKeyUp = (key: string) => {\n    if (key.toLowerCase() === 'enter') {\n      const trimmedText = text.trim();\n      if (trimmedText) {\n        context.addTask(trimmedText);\n        setText('');\n      }\n    }\n  };\n\n  return (\n    <div className=\"my-3\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Write a task and press ENTER\"\n        value={text}\n        onKeyUp={(e) => onKeyUp(e.key)}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <div className=\"mt-2\">\n        <VisibilityToggler />\n      </div>\n    </div>\n  );\n};\n","import { useContext } from 'react';\nimport styled, { css } from 'styled-components';\nimport { ToDoContext } from '../context/ToDoContext';\nimport { Task } from '../models/models';\n\ninterface Props {\n  task: Task;\n}\n\nconst StyledLi = styled.li<any>`\n  background-color: ${(props) => (props.dark ? '#343a40' : 'white')};\n  color: ${(props) => (props.dark ? 'white' : '#41464b')};\n  display: flex;\n  justify-content: space-between;\n  align-content: center;\n  align-items: center;\n  cursor: pointer;\n  transition: background-color 0.25s;\n  &:hover {\n    background-color: ${(props) => (props.dark ? '#212529' : '#f5f3f3')};\n  }\n`;\n\nexport const TaskRow = ({ task }: Props) => {\n  const context = useContext(ToDoContext);\n  return (\n    <StyledLi dark={context.isDark} className={'list-group-item' + (task.done ? ' list-group-item-secondary' : '')}>\n      <div onClick={() => context.toggleTask(task)}>\n        <input\n          className=\"form-check-input me-1\"\n          type=\"checkbox\"\n          onChange={() => context.toggleTask(task)}\n          checked={task.done}\n        />\n        <span className={task.done ? ' text-decoration-line-through' : ''}>{task.description}</span>\n      </div>\n      <button type=\"button\" onClick={() => context.deleteTask(task)} className=\"btn btn-danger btn-sm\">\n        X\n      </button>\n    </StyledLi>\n  );\n};\n","import { Component, ContextType } from 'react';\nimport { ToDoContext, ToDoContextType } from '../context/ToDoContext';\n\nexport class ThemeToggler extends Component {\n  static contextType = ToDoContext;\n  context!: ContextType<typeof ToDoContext>;\n\n  render() {\n    return (\n      <ToDoContext.Consumer>\n        {(context) => (\n          <button className={'btn btn-light'} onClick={context.changeColor}>\n            {context.isDark ? 'Light' : 'Dark'}\n          </button>\n        )}\n      </ToDoContext.Consumer>\n    );\n  }\n}\n","import React, { useContext, useState } from 'react';\nimport './App.scss';\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskCreator } from './components/TaskCreator';\nimport { TaskRow } from './components/TaskRow';\nimport { ThemeToggler } from './components/ThemeToggler';\nimport { ToDoContext } from './context/ToDoContext';\n\nexport const App = () => {\n  const ctx = useContext(ToDoContext);\n\n  const taskRows = () => {\n    return ctx.tasks.filter((t) => (ctx.showCompleted ? t : !t.done)).map((t) => <TaskRow key={t.id} task={t} />);\n  };\n\n  return (\n    <div style={{ ...ctx.theme, ...{ height: '100%', overflow: 'auto' } }}>\n      <TaskBanner />\n      <div className=\"container\">\n        <TaskCreator />\n        <ul className=\"list-group mb-2\">{taskRows()}</ul>\n\n        <div className=\"d-flex justify-content-end mb-3\">\n          <ThemeToggler />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ToDoContextProvider } from './context/ToDoContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToDoContextProvider>\n      <App />\n    </ToDoContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}