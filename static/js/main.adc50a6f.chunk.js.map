{"version":3,"sources":["context/ToDoContext.tsx","components/TaskBanner.tsx","components/VisibilityToggler.tsx","components/TaskCreator.tsx","components/TaskRow.tsx","components/ThemeToggler.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToDoContext","createContext","theme","isDark","tasks","showCompleted","changeColor","addTask","deleteTask","toggleTask","toggleCompletedVisibility","ToDoContextProvider","props","setState","state","task","newTask","id","length","Math","max","map","t","description","done","slice","saveLocalTasks","filter","localStorage","setItem","JSON","stringify","savedItems","getItem","localTasks","parse","dark","backgroundColor","color","light","this","Provider","value","children","Component","Container","py","justifyContent","sx","transition","TaskBanner","completedTodos","useContext","as","VisibilityToggler","context","useState","show","setShow","className","type","checked","onChange","e","target","htmlFor","TaskCreator","text","setText","my","mb","placeholder","onKeyUp","key","toLowerCase","trimmedText","trim","StyledLi","cursor","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","px","bg","display","alignContent","alignItems","TaskRow","textDecorationLine","name","onClick","ThemeToggler","Consumer","contextType","StyledUl","styled","ul","height","overflow","App","ctx","style","width","flexDirection","mx","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","preset","colors","primary","success","danger","document","getElementById"],"mappings":"mTAeaA,EAAcC,wBAA+B,CACxDC,MAAO,GACPC,QAAQ,EACRC,MAAO,GACPC,eAAe,EACfC,YAAa,aACbC,QAAS,aACTC,WAAY,aACZC,WAAY,aACZC,0BAA2B,eAWhBC,EAAb,kDACE,WAAYC,GAAa,IAAD,uBACtB,cAAMA,IAoBRN,YAAc,WACZ,EAAKO,SAAS,CACZV,QAAS,EAAKW,MAAMX,UAvBA,EA2BxBI,QAAU,SAACQ,GACT,IACMC,EAAgB,CACpBC,GAFwC,IAA5B,EAAKH,MAAMV,MAAMc,OAAe,EAAIC,KAAKC,IAAL,MAAAD,KAAI,YAAQ,EAAKL,MAAMV,MAAMiB,KAAI,SAACC,GAAD,OAAOA,EAAEL,QAAO,EAGjGM,YAAaR,EACbS,MAAM,GAGR,EAAKX,SACH,CACET,MAAM,GAAD,mBAAM,EAAKU,MAAMV,MAAMqB,SAAvB,CAAgCT,MAEvC,WACE,EAAKU,qBAxCa,EA6CxBlB,WAAa,SAACO,GACZ,EAAKF,SACH,CACET,MAAO,EAAKU,MAAMV,MAAMuB,QAAO,SAACL,GAAD,OAAOA,EAAEL,KAAOF,EAAKE,QAEtD,WACE,EAAKS,qBAnDa,EAwDxBjB,WAAa,SAACM,GACZ,EAAKF,SACH,CACET,MAAO,EAAKU,MAAMV,MAAMiB,KAAI,SAACC,GAAD,OAAQA,EAAEL,KAAOF,EAAKE,GAAd,2BAAwBK,GAAxB,IAA2BE,MAAOF,EAAEE,OAASF,OAEnF,WACE,EAAKI,qBA9Da,EAmExBhB,0BAA4B,WAC1B,EAAKG,SAAS,CACZR,eAAgB,EAAKS,MAAMT,iBArEP,EAyExBqB,eAAiB,WACfE,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKjB,MAAMV,SAxExD,IAAM4B,EAAaJ,aAAaK,QAAQ,SACpCC,EAAqB,GAHH,OAKpBA,EADEF,EACWF,KAAKK,MAAMH,GAEX,CACX,CAAEf,GAAI,EAAGM,YAAa,SAAUC,MAAM,GACtC,CAAEP,GAAI,EAAGM,YAAa,SAAUC,MAAM,IAG1C,EAAKV,MAAQ,CACXsB,KAAM,CAAEC,gBAAiB,OAAQC,MAAO,SACxCC,MAAO,CAAEF,gBAAiB,QAASC,MAAO,SAC1CnC,QAAQ,EACRC,MAAO8B,EACP7B,eAAe,GAjBK,EAD1B,qDA+EI,IAAMH,EAAQsC,KAAK1B,MAAMX,OAASqC,KAAK1B,MAAMsB,KAAOI,KAAK1B,MAAMyB,MAC/D,OACE,cAACvC,EAAYyC,SAAb,CACEC,MAAK,2BACAF,KAAK1B,OADL,IAEHZ,QACAI,YAAakC,KAAKlC,YAClBC,QAASiC,KAAKjC,QACdC,WAAYgC,KAAKhC,WACjBC,WAAY+B,KAAK/B,WACjBC,0BAA2B8B,KAAK9B,4BARpC,SAWG8B,KAAK5B,MAAM+B,eA5FpB,GAAyCC,aC3BnCC,EAAY,SAACjC,GAAD,OAChB,cAAC,OAAD,2BACMA,GADN,IAEEkC,GAAI,EACJC,eAAgB,SAChBC,GAAI,CACFX,gBAAiBzB,EAAMY,KAAO,UAAY,UAC1CyB,WAAY,8BAKLC,EAAa,WACxB,IACMC,EADUC,qBAAWpD,GACII,MAAMuB,QAAO,SAACL,GAAD,OAAQA,EAAEE,QAAMN,OAC5D,OACE,cAAC,EAAD,CAAWM,KAAyB,IAAnB2B,EAAjB,SACE,eAAC,UAAD,CAASb,MAAO,QAASe,GAAI,KAA7B,wBACcF,EADd,sB,gBCtBOG,EAAoB,WAC/B,IAAMC,EAAUH,qBAAWpD,GADU,EAEbwD,oBAAS,GAFI,mBAE9BC,EAF8B,KAExBC,EAFwB,KAQrC,OACE,sBAAKC,UAAU,aAAf,UACE,uBACEC,KAAK,WACL3C,GAAG,WACH0C,UAAU,mBACVE,QAASJ,EACTK,SAAU,SAACC,GAAD,OAZIF,EAYcE,EAAEC,OAAOH,QAXzCN,EAAQ7C,iCACRgD,EAAQG,GAFS,IAACA,KAchB,uBAAOF,UAAU,mBAAmBM,QAAQ,WAA5C,sCCdOC,EAAc,WACzB,IAAMX,EAAUH,qBAAWpD,GADI,EAEPwD,mBAAS,IAFF,mBAExBW,EAFwB,KAElBC,EAFkB,KAc/B,OACE,eAAC,IAAD,CAAKC,GAAI,EAAT,UACE,cAAC,IAAD,CAAKC,GAAI,EAAT,SACE,cAAC,IAAD,CACEV,KAAK,OACLZ,GAAI,CACF,gBAAiB,CACfV,MAAOiB,EAAQpD,OAAS,QAAU,UAGtCoE,YAAY,+BACZ7B,MAAOyB,EACPK,QAAS,SAACT,GAAD,OAtBD,SAACU,GACf,GAA0B,UAAtBA,EAAIC,cAA2B,CACjC,IAAMC,EAAcR,EAAKS,OACrBD,IACFpB,EAAQhD,QAAQoE,GAChBP,EAAQ,MAiBeI,CAAQT,EAAEU,MAC/BX,SAAU,SAACC,GAAD,OAAYK,EAAQL,EAAEC,OAAOtB,YAG3C,cAAC,IAAD,UACE,cAAC,EAAD,UC3BFmC,EAAW,SAACjE,GAAD,OACf,cAAC,OAAD,2BACMA,GADN,IAEEyC,GAAI,KACJL,GAAI,CACF8B,OAAQ,UACR7B,WAAY,yBACZ,SAAU,CACRZ,gBAAiBzB,EAAMwB,KAAO,UAAY,WAE5C,eAAgB,CACd2C,oBAAqB,UACrBC,qBAAsB,WAExB,cAAe,CACbC,uBAAwB,UACxBC,wBAAyB,YAG7BC,GAAI,EACJrC,GAAI,EACJsC,GAAIxE,EAAMwB,KAAO,UAAY,QAC7BE,MAAO1B,EAAMwB,KAAO,QAAU,UAC9BiD,QAAS,OACTtC,eAAgB,gBAChBuC,aAAc,SACdC,WAAY,aAIHC,EAAU,SAAC,GAAqB,IAAnBzE,EAAkB,EAAlBA,KAClBwC,EAAUH,qBAAWpD,GAC3B,OACE,eAAC,EAAD,CAAUoC,KAAMmB,EAAQpD,OAAxB,UACE,eAAC,IAAD,CAAO6C,GAAI,CAAEyC,mBAAoB1E,EAAKS,KAAO,eAAiB,OAAQsD,OAAQ,WAA9E,UACE,cAAC,IAAD,CACE7D,GAAI,MAAQF,EAAKE,GACjByE,KAAM,MAAQ3E,EAAKE,GACnB6C,SAAU,kBAAMP,EAAQ9C,WAAWM,IACnC8C,QAAS9C,EAAKS,OAEfT,EAAKQ,eAER,cAAC,SAAD,CAAQqC,KAAK,SAAS+B,QAAS,kBAAMpC,EAAQ/C,WAAWO,IAAOqE,GAAI,SAAU9C,MAAO,QAApF,mBCjDOsD,EAAb,4MAEErC,aAFF,yDAKI,OACE,cAACvD,EAAY6F,SAAb,UACG,SAACtC,GAAD,OACC,cAAC,SAAD,CAAQjB,MAAO,QAASqD,QAASpC,EAAQjD,YAAzC,SACGiD,EAAQpD,OAAS,QAAU,gBATxC,GAAkCyC,a,sHAArBgD,EACJE,YAAc9F,ECKvB,IAAM+F,EAAWC,UAAOC,GAAV,KAKRpD,EAAY,SAACjC,GAAD,OAAgB,cAAC,IAAD,2BAASA,GAAT,IAAgBsF,OAAQ,OAAQC,SAAU,WAwB7DC,EAtBI,WACjB,IAAMC,EAAMjD,qBAAWpD,GAMvB,OACE,eAAC,EAAD,CAAWsG,MAAK,eAAOD,EAAInG,OAA3B,UACE,cAAC,EAAD,IACA,eAAC,IAAD,CAAMqG,MAAO,CAAC,OAAQ,OAAQC,cAAe,SAAUC,GAAI,OAAQC,EAAG,EAAtE,UACE,cAAC,EAAD,IACA,cAACX,EAAD,UARGM,EAAIjG,MAAMuB,QAAO,SAACL,GAAD,OAAQ+E,EAAIhG,cAAgBiB,GAAKA,EAAEE,QAAOH,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAoBP,KAAMO,GAAZA,EAAEL,SAUzF,cAAC,IAAD,CAAM8B,eAAgB,WAAYuB,GAAI,EAAtC,SACE,cAAC,EAAD,aClBKqC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,gBAAD,CAAepH,MAAK,2BAAOqH,KAAP,IAAeC,OAAQ,CAAEC,QAAS,UAAWC,QAAS,UAAWC,OAAQ,aAA7F,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.adc50a6f.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\nimport { Task } from '../models/models';\n\nexport type ToDoContextType = {\n  theme: any;\n  isDark: boolean;\n  tasks: Task[];\n  showCompleted: boolean;\n  changeColor: () => void;\n  addTask: (task: string) => void;\n  deleteTask: (task: Task) => void;\n  toggleTask: (task: Task) => void;\n  toggleCompletedVisibility: () => void;\n};\n\nexport const ToDoContext = createContext<ToDoContextType>({\n  theme: {},\n  isDark: false,\n  tasks: [],\n  showCompleted: true,\n  changeColor: () => {},\n  addTask: () => {},\n  deleteTask: () => {},\n  toggleTask: () => {},\n  toggleCompletedVisibility: () => {},\n});\n\ninterface State {\n  light: any;\n  dark: any;\n  isDark: boolean;\n  tasks: Task[];\n  showCompleted: boolean;\n}\n\nexport class ToDoContextProvider extends Component<any, State> {\n  constructor(props: any) {\n    super(props);\n    const savedItems = localStorage.getItem('tasks');\n    let localTasks: Task[] = [];\n    if (savedItems) {\n      localTasks = JSON.parse(savedItems);\n    } else {\n      localTasks = [\n        { id: 1, description: 'Task 1', done: false },\n        { id: 2, description: 'Task 2', done: true },\n      ];\n    }\n    this.state = {\n      dark: { backgroundColor: 'grey', color: 'white' },\n      light: { backgroundColor: 'white', color: 'black' },\n      isDark: false,\n      tasks: localTasks,\n      showCompleted: true,\n    };\n  }\n\n  changeColor = () => {\n    this.setState({\n      isDark: !this.state.isDark,\n    });\n  };\n\n  addTask = (task: string) => {\n    const newId = this.state.tasks.length === 0 ? 1 : Math.max(...this.state.tasks.map((t) => t.id)) + 1;\n    const newTask: Task = {\n      id: newId,\n      description: task,\n      done: false,\n    };\n\n    this.setState(\n      {\n        tasks: [...this.state.tasks.slice(), newTask],\n      },\n      () => {\n        this.saveLocalTasks();\n      }\n    );\n  };\n\n  deleteTask = (task: Task) => {\n    this.setState(\n      {\n        tasks: this.state.tasks.filter((t) => t.id !== task.id),\n      },\n      () => {\n        this.saveLocalTasks();\n      }\n    );\n  };\n\n  toggleTask = (task: Task) => {\n    this.setState(\n      {\n        tasks: this.state.tasks.map((t) => (t.id === task.id ? { ...t, done: !t.done } : t)),\n      },\n      () => {\n        this.saveLocalTasks();\n      }\n    );\n  };\n\n  toggleCompletedVisibility = () => {\n    this.setState({\n      showCompleted: !this.state.showCompleted,\n    });\n  };\n\n  saveLocalTasks = () => {\n    localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n  };\n\n  render() {\n    const theme = this.state.isDark ? this.state.dark : this.state.light;\n    return (\n      <ToDoContext.Provider\n        value={{\n          ...this.state,\n          theme,\n          changeColor: this.changeColor,\n          addTask: this.addTask,\n          deleteTask: this.deleteTask,\n          toggleTask: this.toggleTask,\n          toggleCompletedVisibility: this.toggleCompletedVisibility,\n        }}\n      >\n        {this.props.children}\n      </ToDoContext.Provider>\n    );\n  }\n}\n","import React, { useContext } from 'react';\nimport { Flex, FlexProps, Heading } from 'rebass/styled-components';\nimport { ToDoContext } from '../context/ToDoContext';\n\ninterface Props extends FlexProps {\n  done: boolean;\n}\n\nconst Container = (props: Props) => (\n  <Flex\n    {...props}\n    py={4}\n    justifyContent={'center'}\n    sx={{\n      backgroundColor: props.done ? 'success' : 'primary',\n      transition: 'background-color 0.25s',\n    }}\n  />\n);\n\nexport const TaskBanner = () => {\n  const context = useContext(ToDoContext);\n  const completedTodos = context.tasks.filter((t) => !t.done).length;\n  return (\n    <Container done={completedTodos === 0}>\n      <Heading color={'white'} as={'h4'}>\n        Tasks App ({completedTodos} tasks to do)\n      </Heading>\n    </Container>\n  );\n};\n","import { useContext, useState } from 'react';\nimport { ToDoContext } from '../context/ToDoContext';\n\nexport const VisibilityToggler = () => {\n  const context = useContext(ToDoContext);\n  const [show, setShow] = useState(true);\n  const toggleShow = (checked: boolean) => {\n    context.toggleCompletedVisibility();\n    setShow(checked);\n  };\n\n  return (\n    <div className=\"form-check\">\n      <input\n        type=\"checkbox\"\n        id=\"chk-show\"\n        className=\"form-check-input\"\n        checked={show}\n        onChange={(e) => toggleShow(e.target.checked)}\n      />\n      <label className=\"form-check-label\" htmlFor=\"chk-show\">\n        Show completed items\n      </label>\n    </div>\n  );\n};\n","import { Input } from '@rebass/forms';\nimport { useContext, useState } from 'react';\nimport { Box } from 'rebass';\nimport { ToDoContext } from '../context/ToDoContext';\nimport { VisibilityToggler } from './VisibilityToggler';\n\nexport const TaskCreator = () => {\n  const context = useContext(ToDoContext);\n  const [text, setText] = useState('');\n\n  const onKeyUp = (key: string) => {\n    if (key.toLowerCase() === 'enter') {\n      const trimmedText = text.trim();\n      if (trimmedText) {\n        context.addTask(trimmedText);\n        setText('');\n      }\n    }\n  };\n\n  return (\n    <Box my={3}>\n      <Box mb={2}>\n        <Input\n          type=\"text\"\n          sx={{\n            '::placeholder': {\n              color: context.isDark ? 'white' : 'black',\n            },\n          }}\n          placeholder=\"Write a task and press ENTER\"\n          value={text}\n          onKeyUp={(e: any) => onKeyUp(e.key)}\n          onChange={(e: any) => setText(e.target.value)}\n        />\n      </Box>\n      <Box>\n        <VisibilityToggler />\n      </Box>\n    </Box>\n  );\n};\n","import { Checkbox, Label } from '@rebass/forms';\nimport { useContext } from 'react';\nimport { Button, Text } from 'rebass/styled-components';\nimport { ToDoContext } from '../context/ToDoContext';\nimport { Task } from '../models/models';\n\ninterface Props {\n  task: Task;\n}\n\nconst StyledLi = (props: any) => (\n  <Text\n    {...props}\n    as={'li'}\n    sx={{\n      cursor: 'pointer',\n      transition: 'background-color 0.15s',\n      ':hover': {\n        backgroundColor: props.dark ? '#212529' : '#f5f3f3',\n      },\n      ':first-child': {\n        borderTopLeftRadius: 'inherit',\n        borderTopRightRadius: 'inherit',\n      },\n      ':last-child': {\n        borderBottomLeftRadius: 'inherit',\n        borderBottomRightRadius: 'inherit',\n      },\n    }}\n    px={2}\n    py={2}\n    bg={props.dark ? '#343a40' : 'white'}\n    color={props.dark ? 'white' : '#41464b'}\n    display={'flex'}\n    justifyContent={'space-between'}\n    alignContent={'center'}\n    alignItems={'center'}\n  />\n);\n\nexport const TaskRow = ({ task }: Props) => {\n  const context = useContext(ToDoContext);\n  return (\n    <StyledLi dark={context.isDark}>\n      <Label sx={{ textDecorationLine: task.done ? 'line-through' : 'none', cursor: 'pointer' }}>\n        <Checkbox\n          id={'chk' + task.id}\n          name={'chk' + task.id}\n          onChange={() => context.toggleTask(task)}\n          checked={task.done}\n        />\n        {task.description}\n      </Label>\n      <Button type=\"button\" onClick={() => context.deleteTask(task)} bg={'danger'} color={'white'}>\n        X\n      </Button>\n    </StyledLi>\n  );\n};\n","import { Component, ContextType } from 'react';\nimport { Button } from 'rebass/styled-components';\nimport { ToDoContext } from '../context/ToDoContext';\n\nexport class ThemeToggler extends Component {\n  static contextType = ToDoContext;\n  context!: ContextType<typeof ToDoContext>;\n\n  render() {\n    return (\n      <ToDoContext.Consumer>\n        {(context) => (\n          <Button color={'white'} onClick={context.changeColor}>\n            {context.isDark ? 'Light' : 'Dark'}\n          </Button>\n        )}\n      </ToDoContext.Consumer>\n    );\n  }\n}\n","import React, { useContext } from 'react';\nimport { Box, Flex } from 'rebass';\nimport styled from 'styled-components';\nimport './App.scss';\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskCreator } from './components/TaskCreator';\nimport { TaskRow } from './components/TaskRow';\nimport { ThemeToggler } from './components/ThemeToggler';\nimport { ToDoContext } from './context/ToDoContext';\n\nconst StyledUl = styled.ul`\n  padding-left: 0;\n  border-radius: 0.25rem;\n`;\n\nconst Container = (props: any) => <Box {...props} height={'100%'} overflow={'auto'} />;\n\nexport const App = () => {\n  const ctx = useContext(ToDoContext);\n\n  const taskRows = () => {\n    return ctx.tasks.filter((t) => (ctx.showCompleted ? t : !t.done)).map((t) => <TaskRow key={t.id} task={t} />);\n  };\n\n  return (\n    <Container style={{ ...ctx.theme }}>\n      <TaskBanner />\n      <Flex width={['100%', '90%']} flexDirection={'column'} mx={'auto'} p={3}>\n        <TaskCreator />\n        <StyledUl>{taskRows()}</StyledUl>\n\n        <Flex justifyContent={'flex-end'} mb={3}>\n          <ThemeToggler />\n        </Flex>\n      </Flex>\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// @ts-ignore\nimport preset from '@rebass/preset';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport { ToDoContextProvider } from './context/ToDoContext';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToDoContextProvider>\n      <ThemeProvider theme={{ ...preset, colors: { primary: '#2196f3', success: '#4caf50', danger: '#f44336' } }}>\n        <App />\n      </ThemeProvider>\n    </ToDoContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}