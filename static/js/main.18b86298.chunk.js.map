{"version":3,"sources":["components/TaskRow.tsx","components/TaskBanner.tsx","components/TaskCreator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskRow","task","onToggleTask","onDeleteItem","className","done","type","onChange","checked","description","onClick","TaskBanner","todos","tasks","filter","t","length","TaskCreator","onCreate","onToggleShow","useState","text","setText","show","setShow","placeholder","value","onKeyUp","e","key","toLowerCase","trimmedText","trim","target","id","htmlFor","App","setTasks","showCompleted","setShowCompleted","toggleTask","map","deleteTask","index","findIndex","data","splice","useEffect","savedItems","localStorage","getItem","JSON","parse","setItem","stringify","newTask","Math","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18b86298.chunk.js","sourcesContent":["import { Task } from '../models/models';\n\ninterface Props {\n  task: Task;\n\n  onToggleTask(task: Task): void;\n\n  onDeleteItem(task: Task): void;\n}\n\nexport const TaskRow = ({task, onToggleTask, onDeleteItem}: Props) => {\n\n  return (\n      <li className={'list-group-item d-flex justify-content-between align-items-center' + (task.done ? ' list-group-item-secondary' : '')}>\n        <div>\n          <input className=\"form-check-input me-1\"\n                 type=\"checkbox\"\n                 onChange={() => onToggleTask(task)}\n                 checked={task.done}/>\n          <span className={task.done ? ' text-decoration-line-through' : ''}>{task.description}</span>\n        </div>\n        <button type=\"button\" onClick={() => onDeleteItem(task)} className=\"btn btn-danger btn-sm\">X</button>\n      </li>\n  );\n}\n","import { Task } from '../models/models';\n\ninterface Props {\n  tasks: Task[]\n}\n\nexport const TaskBanner = ({tasks}: Props) => {\n  const todos = tasks.filter(t => !t.done).length;\n  return (\n      <h4 className={'text-white text-center p-4' + (todos === 0 ? ' bg-success' : ' bg-primary')}>\n        Tasks App ({todos} tasks to do)\n      </h4>\n  )\n}\n","import { useState } from 'react';\n\ninterface Props {\n  onCreate(text: string): void;\n\n  onToggleShow(show: boolean): void;\n}\n\nexport const TaskCreator = ({onCreate, onToggleShow}: Props) => {\n  const [text, setText] = useState('');\n  const [show, setShow] = useState(true);\n\n  const onKeyUp = (key: string) => {\n    if (key.toLowerCase() === 'enter') {\n      const trimmedText = text.trim();\n      if (trimmedText) {\n        onCreate(trimmedText);\n        setText('');\n      }\n    }\n  }\n\n  const toggleShow = (checked: boolean) => {\n    onToggleShow(checked);\n    setShow(checked);\n  }\n\n  return (\n      <div className='input-group my-3'>\n        <input type=\"text\"\n               className=\"form-control\"\n               placeholder=\"Write a task and press ENTER\"\n               value={text}\n               onKeyUp={(e) => onKeyUp(e.key)}\n               onChange={(e) => setText(e.target.value)}/>\n        <div className=\"input-group-text\">\n          <div className=\"form-check\">\n            <input type=\"checkbox\" id=\"chk-show\"\n                   className=\"form-check-input\"\n                   checked={show}\n                   onChange={(e) => toggleShow(e.target.checked)}/>\n            <label className=\"form-check-label\" htmlFor=\"chk-show\">Show completed items</label>\n          </div>\n        </div>\n      </div>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport { Task } from './models/models';\nimport { TaskRow } from './components/TaskRow';\nimport './App.scss';\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskCreator } from './components/TaskCreator';\n\nexport const App = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [showCompleted, setShowCompleted] = useState(true);\n\n  const toggleTask = (task: Task) => {\n    setTasks(tasks.map(t => t.id === task.id ? {...t, done: !t.done} : t));\n  }\n\n  const taskRows = () => {\n    return tasks\n        .filter(t => showCompleted ? t : !t.done)\n        .map(t => (<TaskRow key={t.id} task={t} onToggleTask={toggleTask} onDeleteItem={deleteTask}/>));\n  }\n\n  const createTask = (text: string) => {\n    const newId = tasks.length === 0 ? 1 : Math.max(...tasks.map(t => t.id)) + 1;\n    const newTask: Task = {\n      id: newId,\n      description: text,\n      done: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  const deleteTask = (task: Task) => {\n    const index = tasks.findIndex(t => t.id === task.id);\n    const data = [...tasks];\n    data.splice(index, 1);\n    setTasks(data);\n  }\n\n  useEffect(() => {\n    const savedItems = localStorage.getItem('tasks');\n    if (savedItems) {\n      setTasks(JSON.parse(savedItems));\n    } else {\n      setTasks([\n        {id: 1, description: 'Task 1', done: false},\n        {id: 2, description: 'Task 2', done: true}\n      ]);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  return (\n      <>\n        <TaskBanner tasks={tasks}/>\n        <div className=\"container\">\n          <TaskCreator onCreate={createTask} onToggleShow={() => setShowCompleted(!showCompleted)}/>\n          <ul className=\"list-group\">{taskRows()}</ul>\n        </div>\n      </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}