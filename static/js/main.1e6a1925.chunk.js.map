{"version":3,"sources":["api.ts","components/TaskBanner.tsx","context/ToDoContext.tsx","components/VisibilityToggler.tsx","components/TaskCreator.tsx","components/TaskRow.tsx","components/ThemeToggler.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiUrl","useServer","process","delay","Math","random","getTasks","a","fetch","response","json","responseBody","ok","Error","Promise","resolve","reject","savedItems","localStorage","getItem","localTasks","JSON","parse","id","description","done","setTimeout","addTask","task","body","stringify","method","headers","message","tasks","newId","length","max","map","t","newTask","unshift","saveLocalTasks","toggleTask","taskId","deleteTask","filter","setItem","Container","props","py","justifyContent","sx","backgroundColor","transition","TaskBanner","completedTasks","color","as","ToDoContext","createContext","theme","isDark","showCompleted","changeColor","toggleCompletedVisibility","ToDoContextProvider","setState","state","slice","dark","light","this","Provider","value","children","Component","VisibilityToggler","context","useContext","useState","show","setShow","display","name","checked","bg","onChange","e","target","TaskCreator","input","useRef","queryClient","useQueryClient","useMutation","text","onSuccess","invalidateQueries","current","focus","mutate","isLoading","error","isError","reset","my","mb","type","borderColor","placeholder","ref","onKeyUp","key","toLowerCase","trimmedText","trim","readOnly","onBlur","pb","StyledLi","border","cursor","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderTopWidth","alignContent","alignItems","DeleteButton","useTheme","variant","minWidth","minHeight","mr","disabled","borderRadius","lighten","colors","danger","darken","p","fontSize","TaskRow","invalidate","deleteMutation","isDeleting","toggleMutation","isToggling","px","textDecorationLine","onClick","ThemeToggler","Consumer","contextType","StyledUl","styled","ul","height","overflow","App","useQuery","staleTime","data","ctx","style","x","width","flexDirection","mx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","preset","primary","success","buttons","console","log","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","initialIsOpen","document","getElementById"],"mappings":"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","file":"static/js/main.1e6a1925.chunk.js","sourcesContent":["import { Task } from './models/models';\nconst apiUrl = `http://localhost:4000`;\nconst useServer = typeof process === 'object';\n\nconst delay = () => {\n  return (Math.random() * 2 + 1) * 1000;\n};\n\nexport const getTasks = async () => {\n  if (useServer) {\n    const response = await fetch(`${apiUrl}/tasks`);\n    const responseBody = await response.json();\n    if (!response.ok) throw new Error(responseBody);\n\n    return responseBody as Task[];\n  }\n\n  return new Promise<Task[]>((resolve, reject) => {\n    const savedItems = localStorage.getItem('tasks');\n    let localTasks: Task[] = [];\n    if (savedItems) {\n      localTasks = JSON.parse(savedItems);\n    } else {\n      localTasks = [\n        { id: 1, description: 'Task 1', done: false },\n        { id: 2, description: 'Task 2', done: true },\n      ];\n    }\n    setTimeout(() => resolve(localTasks), delay());\n  });\n};\n\nexport const addTask = async (task: string) => {\n  if (useServer) {\n    const response = await fetch(`${apiUrl}/tasks`, {\n      body: JSON.stringify({ description: task }),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) throw new Error((await response.json()).message);\n\n    return (await response.json()) as Task;\n  }\n\n  return new Promise<Task>(async (resolve, reject) => {\n    const tasks = await getTasks();\n    const newId = tasks.length === 0 ? 1 : Math.max(...tasks.map((t) => t.id)) + 1;\n    const newTask: Task = {\n      id: newId,\n      description: task,\n      done: false,\n    };\n    tasks.unshift(newTask);\n    saveLocalTasks(tasks);\n    setTimeout(() => resolve(newTask), delay());\n  });\n};\n\nexport const toggleTask = async (taskId: number) => {\n  if (useServer) {\n    const response = await fetch(`${apiUrl}/tasks/${taskId}/toggle`, {\n      method: 'PATCH',\n    });\n    if (!response.ok) throw new Error((await response.json()).message);\n\n    return;\n  }\n\n  return new Promise<void>(async (resolve, reject) => {\n    const tasks = await getTasks();\n    tasks.map((t) => (t.id === taskId ? { ...t, done: !t.done } : t));\n    saveLocalTasks(tasks);\n    setTimeout(() => resolve(), delay());\n  });\n};\n\nexport const deleteTask = async (taskId: number) => {\n  if (useServer) {\n    const response = await fetch(`${apiUrl}/tasks/${taskId}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) throw new Error((await response.json()).message);\n\n    return;\n  }\n\n  return new Promise<void>(async (resolve, reject) => {\n    const tasks = await getTasks();\n    saveLocalTasks(tasks.filter((t) => t.id !== taskId));\n    setTimeout(() => resolve(), delay());\n  });\n};\n\nconst saveLocalTasks = (tasks: Task[]) => {\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n};\n","import React from 'react';\nimport { Flex, Heading } from 'rebass/styled-components';\n\ntype Props = {\n  completedTasks: number;\n};\n\nconst Container = (props: any) => (\n  <Flex\n    {...props}\n    py={4}\n    justifyContent={'center'}\n    sx={{\n      backgroundColor: props.done ? 'success' : 'primary',\n      transition: 'background-color 0.25s',\n    }}\n  />\n);\n\nexport const TaskBanner = ({ completedTasks }: Props) => {\n  return (\n    <Container done={completedTasks === 0}>\n      <Heading color={'white'} as={'h4'}>\n        Tasks App ({completedTasks} tasks to do)\n      </Heading>\n    </Container>\n  );\n};\n","import React, { Component, createContext } from 'react';\nimport { Task } from '../models/models';\n\nexport type ToDoContextType = {\n  theme: any;\n  isDark: boolean;\n  tasks: Task[];\n  showCompleted: boolean;\n  changeColor: () => void;\n  addTask: (task: string) => void;\n  deleteTask: (task: Task) => void;\n  toggleTask: (task: Task) => void;\n  toggleCompletedVisibility: () => void;\n};\n\nexport const ToDoContext = createContext<ToDoContextType>({\n  theme: {},\n  isDark: false,\n  tasks: [],\n  showCompleted: true,\n  changeColor: () => {},\n  addTask: () => {},\n  deleteTask: () => {},\n  toggleTask: () => {},\n  toggleCompletedVisibility: () => {},\n});\n\ninterface State {\n  light: any;\n  dark: any;\n  isDark: boolean;\n  tasks: Task[];\n  showCompleted: boolean;\n}\n\nexport class ToDoContextProvider extends Component<any, State> {\n  constructor(props: any) {\n    super(props);\n    const savedItems = localStorage.getItem('tasks');\n    let localTasks: Task[] = [];\n    if (savedItems) {\n      localTasks = JSON.parse(savedItems);\n    } else {\n      localTasks = [\n        { id: 1, description: 'Task 1', done: false },\n        { id: 2, description: 'Task 2', done: true },\n      ];\n    }\n    this.state = {\n      dark: { backgroundColor: 'grey', color: 'white' },\n      light: { backgroundColor: 'white', color: 'black' },\n      isDark: false,\n      tasks: localTasks,\n      showCompleted: true,\n    };\n  }\n\n  changeColor = () => {\n    this.setState({\n      isDark: !this.state.isDark,\n    });\n  };\n\n  addTask = (task: string) => {\n    const newId = this.state.tasks.length === 0 ? 1 : Math.max(...this.state.tasks.map((t) => t.id)) + 1;\n    const newTask: Task = {\n      id: newId,\n      description: task,\n      done: false,\n    };\n\n    this.setState(\n      {\n        tasks: [...this.state.tasks.slice(), newTask],\n      },\n      () => {\n        this.saveLocalTasks();\n      }\n    );\n  };\n\n  deleteTask = (task: Task) => {\n    this.setState(\n      {\n        tasks: this.state.tasks.filter((t) => t.id !== task.id),\n      },\n      () => {\n        this.saveLocalTasks();\n      }\n    );\n  };\n\n  toggleTask = (task: Task) => {\n    this.setState(\n      {\n        tasks: this.state.tasks.map((t) => (t.id === task.id ? { ...t, done: !t.done } : t)),\n      },\n      () => {\n        this.saveLocalTasks();\n      }\n    );\n  };\n\n  toggleCompletedVisibility = () => {\n    this.setState({\n      showCompleted: !this.state.showCompleted,\n    });\n  };\n\n  saveLocalTasks = () => {\n    localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n  };\n\n  render() {\n    const theme = this.state.isDark ? this.state.dark : this.state.light;\n    return (\n      <ToDoContext.Provider\n        value={{\n          ...this.state,\n          theme,\n          changeColor: this.changeColor,\n          addTask: this.addTask,\n          deleteTask: this.deleteTask,\n          toggleTask: this.toggleTask,\n          toggleCompletedVisibility: this.toggleCompletedVisibility,\n        }}\n      >\n        {this.props.children}\n      </ToDoContext.Provider>\n    );\n  }\n}\n","import { Checkbox, Label } from '@rebass/forms';\nimport { useContext, useState } from 'react';\nimport { Box } from 'rebass';\nimport { ToDoContext } from '../context/ToDoContext';\n\nexport const VisibilityToggler = () => {\n  const context = useContext(ToDoContext);\n  const [show, setShow] = useState(true);\n  const toggleShow = (checked: boolean) => {\n    context.toggleCompletedVisibility();\n    setShow(checked);\n  };\n\n  return (\n    <Box display={'inline-block'}>\n      <Label>\n        <Checkbox\n          id=\"chk-show\"\n          name=\"chk-show\"\n          checked={show}\n          color={'blue'}\n          bg={'white'}\n          onChange={(e) => toggleShow(e.target.checked)}\n        />\n        Show completed items\n      </Label>\n    </Box>\n  );\n};\n","import { Input } from '@rebass/forms';\nimport { useContext, useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { Box } from 'rebass';\nimport { Text } from 'rebass/styled-components';\nimport { addTask } from '../api';\nimport { ToDoContext } from '../context/ToDoContext';\nimport { Task } from '../models/models';\nimport { VisibilityToggler } from './VisibilityToggler';\n\nexport const TaskCreator = () => {\n  const context = useContext(ToDoContext);\n  const input = useRef<HTMLInputElement>();\n  const queryClient = useQueryClient();\n  const { mutate, isLoading, error, isError, reset } = useMutation<Task, any, string>(\n    'addTask',\n    (text) => addTask(text),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('listTasks');\n        input.current!!.value = '';\n        input.current?.focus();\n      },\n    }\n  );\n\n  const onKeyUp = (key: string) => {\n    if (key.toLowerCase() === 'enter') {\n      const trimmedText = input.current?.value.trim();\n      if (trimmedText) {\n        mutate(trimmedText);\n        input.current?.focus();\n      }\n    }\n  };\n\n  return (\n    <Box my={3}>\n      <Box mb={2}>\n        <Input\n          type=\"text\"\n          sx={{\n            '::placeholder': {\n              color: context.isDark ? 'white' : 'black',\n            },\n            borderColor: isError ? 'red' : 'initial',\n          }}\n          placeholder=\"Write a task and press ENTER\"\n          ref={input}\n          onKeyUp={(e: any) => onKeyUp(e.key)}\n          readOnly={isLoading}\n          onBlur={() => reset()}\n        />\n      </Box>\n      {isError && (\n        <Box pb={2}>\n          <Text color={'danger'}>{error + ''}</Text>\n        </Box>\n      )}\n      <Box>\n        <VisibilityToggler />\n      </Box>\n    </Box>\n  );\n};\n","import { Checkbox, Label } from '@rebass/forms';\nimport { darken, lighten } from 'polished';\nimport { useContext } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { Button, ButtonProps, Text } from 'rebass/styled-components';\nimport { useTheme } from 'styled-components';\nimport { deleteTask, toggleTask } from '../api';\nimport { ToDoContext } from '../context/ToDoContext';\nimport { Task } from '../models/models';\n\ninterface Props {\n  task: Task;\n}\n\nconst StyledLi = (props: any) => (\n  <Text\n    {...props}\n    as={'li'}\n    sx={{\n      border: '1px solid rgba(0,0,0,0.125)',\n      cursor: 'pointer',\n      transition: 'background-color 0.15s',\n      ':hover': {\n        backgroundColor: props.dark ? '#212529' : '#f5f3f3',\n      },\n      ':first-child': {\n        borderTopLeftRadius: 'inherit',\n        borderTopRightRadius: 'inherit',\n      },\n      ':last-child': {\n        borderBottomLeftRadius: 'inherit',\n        borderBottomRightRadius: 'inherit',\n      },\n      '&+&': {\n        borderTopWidth: 0,\n      },\n    }}\n    bg={props.dark ? '#343a40' : 'white'}\n    color={props.dark ? 'white' : '#41464b'}\n    display={'flex'}\n    justifyContent={'space-between'}\n    alignContent={'center'}\n    alignItems={'center'}\n  />\n);\n\nconst DeleteButton = (props: ButtonProps) => {\n  const theme = useTheme() as any;\n  return (\n    <Button\n      {...props}\n      variant={'danger'}\n      minWidth={35}\n      minHeight={35}\n      mr={3}\n      sx={{\n        cursor: props.disabled ? 'not-allowed' : 'pointer',\n        borderRadius: '50%',\n        backgroundColor: props.disabled ? lighten(0.07, theme.colors.danger) : 'danger',\n        '&:hover': {\n          backgroundColor: props.disabled ? lighten(0.07, theme.colors.danger) : darken(0.07, theme.colors.danger),\n        },\n      }}\n      p={0}\n      fontSize={'1.8rem'}\n    />\n  );\n};\n\nexport const TaskRow = ({ task }: Props) => {\n  const context = useContext(ToDoContext);\n  const queryClient = useQueryClient();\n  const invalidate = () => queryClient.invalidateQueries('listTasks');\n  const { mutate: deleteMutation, isLoading: isDeleting } = useMutation((taskId: number) => deleteTask(taskId), {\n    onSuccess: invalidate,\n  });\n  const { mutate: toggleMutation, isLoading: isToggling } = useMutation((taskId: number) => toggleTask(taskId), {\n    onSuccess: invalidate,\n  });\n\n  return (\n    <StyledLi dark={context.isDark}>\n      <Label px={3} py={3} sx={{ textDecorationLine: task.done ? 'line-through' : 'none', cursor: 'pointer' }}>\n        <Checkbox\n          id={'chk' + task.id}\n          name={'chk' + task.id}\n          onChange={() => toggleMutation(task.id)}\n          checked={task.done}\n          disabled={isToggling || isDeleting}\n        />\n        {task.description}\n      </Label>\n      <DeleteButton\n        type=\"button\"\n        onClick={() => {\n          deleteMutation(task.id);\n        }}\n        disabled={isDeleting || isToggling}\n      >\n        &times;\n      </DeleteButton>\n    </StyledLi>\n  );\n};\n","import { Component, ContextType } from 'react';\nimport { Button } from 'rebass/styled-components';\nimport { ToDoContext } from '../context/ToDoContext';\n\nexport class ThemeToggler extends Component {\n  static contextType = ToDoContext;\n  context!: ContextType<typeof ToDoContext>;\n\n  render() {\n    return (\n      <ToDoContext.Consumer>\n        {(context) => (\n          <Button color={'white'} onClick={context.changeColor}>\n            {context.isDark ? 'Light' : 'Dark'}\n          </Button>\n        )}\n      </ToDoContext.Consumer>\n    );\n  }\n}\n","import React, { useContext } from 'react';\nimport { useQuery } from 'react-query';\nimport { Box, Flex } from 'rebass';\nimport { Text } from 'rebass/styled-components';\nimport styled from 'styled-components';\nimport { getTasks } from './api';\nimport './App.scss';\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskCreator } from './components/TaskCreator';\nimport { TaskRow } from './components/TaskRow';\nimport { ThemeToggler } from './components/ThemeToggler';\nimport { ToDoContext } from './context/ToDoContext';\n\nconst StyledUl = styled.ul`\n  padding-left: 0;\n  border-radius: 0.25rem;\n  margin-top: 0;\n`;\n\nconst Container = (props: any) => <Box {...props} height={'100%'} overflow={'auto'} />;\n\nexport const App = () => {\n  const { isLoading, data } = useQuery('listTasks', getTasks, { staleTime: 60 * 1000 });\n  const ctx = useContext(ToDoContext);\n\n  if (isLoading) {\n    return <Text>Cargando...</Text>;\n  }\n\n  const taskRows = () => {\n    return (data || []).filter((t) => (ctx.showCompleted ? t : !t.done)).map((t) => <TaskRow key={t.id} task={t} />);\n  };\n\n  const completedTasks = () => {\n    return (data || []).filter((x) => x.done).length;\n  };\n\n  return (\n    <Container style={{ ...ctx.theme }}>\n      <TaskBanner completedTasks={completedTasks()} />\n      <Flex width={['100%', '90%']} flexDirection={'column'} mx={'auto'} p={3}>\n        <TaskCreator />\n        <StyledUl>{taskRows()}</StyledUl>\n\n        <Flex justifyContent={'flex-end'} mb={3}>\n          <ThemeToggler />\n        </Flex>\n      </Flex>\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// @ts-ignore\nimport preset from '@rebass/preset';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport { ToDoContextProvider } from './context/ToDoContext';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nexport const theme = {\n  ...preset,\n  ...{\n    colors: {\n      ...preset.colors,\n      primary: '#2196f3',\n      success: '#4caf50',\n      danger: '#f44336',\n    },\n    buttons: {\n      ...preset.buttons,\n      danger: {\n        color: 'white',\n        bg: 'danger',\n      },\n    },\n  },\n};\n\nconsole.log(theme);\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <ToDoContextProvider>\n        <ThemeProvider theme={theme}>\n          <App />\n        </ThemeProvider>\n      </ToDoContextProvider>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}