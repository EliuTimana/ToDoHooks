{"version":3,"sources":["api.ts","components/TaskBanner.tsx","context/ToDoContext.tsx","components/VisibilityToggler.tsx","components/TaskCreator.tsx","components/TaskRow.tsx","components/ThemeToggler.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiUrl","delay","Math","random","getTasks","a","fetch","response","json","responseBody","ok","Error","Promise","resolve","reject","savedItems","localStorage","getItem","localTasks","JSON","parse","id","description","done","setTimeout","addTask","task","body","stringify","method","headers","message","tasks","newId","length","max","map","t","newTask","unshift","saveLocalTasks","toggleTask","taskId","deleteTask","filter","setItem","Container","props","py","justifyContent","sx","backgroundColor","transition","TaskBanner","uncompletedTasks","color","as","ToDoContext","createContext","theme","isDark","isLoading","showCompleted","changeColor","toggleCompletedVisibility","showLoading","hideLoading","ToDoContextProvider","setState","state","dark","light","this","Provider","value","children","Component","VisibilityToggler","context","useContext","useState","show","setShow","FormControlLabel","control","Checkbox","name","checked","onChange","e","target","label","TaskCreator","input","useRef","queryClient","useQueryClient","useMutation","text","onSuccess","invalidateQueries","current","focus","onError","mutate","error","isError","reset","Grid","container","spacing","item","xs","FormControl","fullWidth","variant","InputLabel","htmlFor","OutlinedInput","type","inputRef","onKeyUp","key","toLowerCase","trimmedText","trim","disabled","autoComplete","autoFocus","endAdornment","InputAdornment","position","IconButton","onClick","clearAll","Clear","labelWidth","FormHelperText","TaskRow","deleteMutation","isDeleting","toggleMutation","isToggling","ListItem","button","ListItemIcon","edge","disableRipple","ListItemText","primary","style","textDecorationLine","ListItemSecondaryAction","Delete","ThemeToggler","Consumer","Button","startIcon","Brightness7","Brightness4","contextType","height","overflow","App","ctx","useQuery","staleTime","data","x","width","flexDirection","mx","p","LinearProgress","visibility","List","mb","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","preset","colors","success","danger","buttons","bg","console","log","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","initialIsOpen","document","getElementById"],"mappings":"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","file":"static/js/main.41340910.chunk.js","sourcesContent":["import { Task } from './models/models';\nconst apiUrl = `http://localhost:4000`;\nconst useServer = true; //typeof window === 'undefined';\n\nconst delay = () => {\n  return (Math.random() * 2 + 1) * 1000;\n};\n\nexport const getTasks = async () => {\n  if (useServer) {\n    const response = await fetch(`${apiUrl}/tasks`);\n    const responseBody = await response.json();\n    if (!response.ok) throw new Error(responseBody);\n\n    return responseBody as Task[];\n  }\n\n  return new Promise<Task[]>((resolve, reject) => {\n    const savedItems = localStorage.getItem('tasks');\n    let localTasks: Task[] = [];\n    if (savedItems) {\n      localTasks = JSON.parse(savedItems);\n    } else {\n      localTasks = [\n        { id: 1, description: 'Task 1', done: false },\n        { id: 2, description: 'Task 2', done: true },\n      ];\n    }\n    setTimeout(() => resolve(localTasks), delay());\n  });\n};\n\nexport const addTask = async (task: string) => {\n  if (useServer) {\n    const response = await fetch(`${apiUrl}/tasks`, {\n      body: JSON.stringify({ description: task }),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) throw new Error((await response.json()).message);\n\n    return (await response.json()) as Task;\n  }\n\n  return new Promise<Task>(async (resolve, reject) => {\n    const tasks = await getTasks();\n    const newId = tasks.length === 0 ? 1 : Math.max(...tasks.map((t) => t.id)) + 1;\n    const newTask: Task = {\n      id: newId,\n      description: task,\n      done: false,\n    };\n    tasks.unshift(newTask);\n    saveLocalTasks(tasks);\n    setTimeout(() => resolve(newTask), delay());\n  });\n};\n\nexport const toggleTask = async (taskId: number) => {\n  if (useServer) {\n    const response = await fetch(`${apiUrl}/tasks/${taskId}/toggle`, {\n      method: 'PATCH',\n    });\n    if (!response.ok) throw new Error((await response.json()).message);\n\n    return;\n  }\n\n  return new Promise<void>(async (resolve, reject) => {\n    const tasks = await getTasks();\n    tasks.map((t) => (t.id === taskId ? { ...t, done: !t.done } : t));\n    saveLocalTasks(tasks);\n    setTimeout(() => resolve(), delay());\n  });\n};\n\nexport const deleteTask = async (taskId: number) => {\n  if (useServer) {\n    const response = await fetch(`${apiUrl}/tasks/${taskId}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) throw new Error((await response.json()).message);\n\n    return;\n  }\n\n  return new Promise<void>(async (resolve, reject) => {\n    const tasks = await getTasks();\n    saveLocalTasks(tasks.filter((t) => t.id !== taskId));\n    setTimeout(() => resolve(), delay());\n  });\n};\n\nconst saveLocalTasks = (tasks: Task[]) => {\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n};\n","import React from 'react';\nimport { Flex, Heading } from 'rebass/styled-components';\n\ntype Props = {\n  uncompletedTasks: number;\n};\n\nconst Container = (props: any) => (\n  <Flex\n    {...props}\n    py={4}\n    justifyContent={'center'}\n    sx={{\n      backgroundColor: props.done ? 'success' : 'primary',\n      transition: 'background-color 0.25s',\n    }}\n  />\n);\n\nexport const TaskBanner = ({ uncompletedTasks }: Props) => {\n  return (\n    <Container done={uncompletedTasks === 0}>\n      <Heading color={'white'} as={'h4'}>\n        Tasks App ({uncompletedTasks} tasks to do)\n      </Heading>\n    </Container>\n  );\n};\n","import React, { Component, createContext } from 'react';\n\nexport type ToDoContextType = {\n  theme: any;\n  isDark: boolean;\n  isLoading: boolean;\n  showCompleted: boolean;\n  changeColor: () => void;\n  toggleCompletedVisibility: () => void;\n  showLoading: () => void;\n  hideLoading: () => void;\n};\n\nexport const ToDoContext = createContext<ToDoContextType>({\n  theme: {},\n  isDark: false,\n  isLoading: false,\n  showCompleted: true,\n  changeColor: () => {},\n  toggleCompletedVisibility: () => {},\n  showLoading: () => {},\n  hideLoading: () => {},\n});\n\ninterface State {\n  light: any;\n  dark: any;\n  isDark: boolean;\n  showCompleted: boolean;\n  isLoading: boolean;\n}\n\nexport class ToDoContextProvider extends Component<any, State> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      dark: { backgroundColor: 'grey', color: 'white' },\n      light: { backgroundColor: 'white', color: 'black' },\n      isDark: false,\n      isLoading: false,\n      showCompleted: true,\n    };\n  }\n\n  changeColor = () => {\n    this.setState({\n      isDark: !this.state.isDark,\n    });\n  };\n\n  toggleCompletedVisibility = () => {\n    this.setState({\n      showCompleted: !this.state.showCompleted,\n    });\n  };\n  showLoading = () => {\n    this.setState({\n      isLoading: true,\n    });\n  };\n  hideLoading = () => {\n    this.setState({\n      isLoading: false,\n    });\n  };\n  render() {\n    const theme = this.state.isDark ? this.state.dark : this.state.light;\n    return (\n      <ToDoContext.Provider\n        value={{\n          ...this.state,\n          theme,\n          changeColor: this.changeColor,\n          toggleCompletedVisibility: this.toggleCompletedVisibility,\n          showLoading: this.showLoading,\n          hideLoading: this.hideLoading,\n        }}\n      >\n        {this.props.children}\n      </ToDoContext.Provider>\n    );\n  }\n}\n","import { Checkbox, FormControlLabel } from '@material-ui/core';\nimport { useContext, useState } from 'react';\nimport { ToDoContext } from '../context/ToDoContext';\n\nexport const VisibilityToggler = () => {\n  const context = useContext(ToDoContext);\n  const [show, setShow] = useState(true);\n  const toggleShow = (checked: boolean) => {\n    context.toggleCompletedVisibility();\n    setShow(checked);\n  };\n\n  return (\n    <FormControlLabel\n      control={\n        <Checkbox\n          id=\"chk-show\"\n          name=\"chk-show\"\n          checked={show}\n          onChange={(e) => toggleShow(e.target.checked)}\n          color={context.isDark ? 'secondary' : 'primary'}\n        />\n      }\n      label={'Show completed items'}\n    />\n  );\n};\n","import {\n  FormControl,\n  FormHelperText,\n  Grid,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n} from '@material-ui/core';\nimport { Clear } from '@material-ui/icons';\nimport { useContext, useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { addTask } from '../api';\nimport { ToDoContext } from '../context/ToDoContext';\nimport { Task } from '../models/models';\nimport { VisibilityToggler } from './VisibilityToggler';\n\nexport const TaskCreator = () => {\n  const context = useContext(ToDoContext);\n  const input = useRef<HTMLInputElement>();\n  const queryClient = useQueryClient();\n  const onError = () => {\n    context.hideLoading();\n  };\n  const { mutate, isLoading, error, isError, reset } = useMutation<Task, any, string>(\n    'addTask',\n    (text) => addTask(text),\n    {\n      onSuccess: async () => {\n        await queryClient.invalidateQueries('listTasks');\n        input.current!!.value = '';\n        setTimeout(() => {\n          input.current!!.focus();\n        });\n      },\n      onError,\n    }\n  );\n\n  const onKeyUp = (key: string) => {\n    if (key.toLowerCase() === 'enter') {\n      const trimmedText = input.current?.value.trim();\n      if (trimmedText) {\n        mutate(trimmedText);\n        context.showLoading();\n        input.current?.focus();\n      }\n    }\n  };\n\n  const clearAll = () => {\n    input.current!!.value = '';\n    input.current?.focus();\n    reset();\n  };\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <FormControl error={isError} fullWidth variant={'outlined'}>\n          <InputLabel htmlFor=\"input-create\">Write a task and press ENTER</InputLabel>\n          <OutlinedInput\n            id={'input-create'}\n            type=\"text\"\n            inputRef={input}\n            onKeyUp={(e: any) => onKeyUp(e.key)}\n            disabled={isLoading}\n            autoComplete={'off'}\n            autoFocus\n            endAdornment={\n              input.current?.value && (\n                <InputAdornment position={'end'}>\n                  <IconButton disabled={isLoading} onClick={() => clearAll()}>\n                    <Clear />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }\n            labelWidth={215}\n          />\n          {error && <FormHelperText>{error + ''}</FormHelperText>}\n        </FormControl>\n      </Grid>\n      <Grid item xs={12}>\n        <VisibilityToggler />\n      </Grid>\n    </Grid>\n  );\n};\n","import { Checkbox, IconButton, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useContext } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { deleteTask, toggleTask } from '../api';\nimport { ToDoContext } from '../context/ToDoContext';\nimport { Task } from '../models/models';\n\ninterface Props {\n  task: Task;\n}\n\nexport const TaskRow = ({ task }: Props) => {\n  const context = useContext(ToDoContext);\n  const queryClient = useQueryClient();\n  const onSuccess = async () => {\n    await queryClient.invalidateQueries('listTasks');\n  };\n  const onError = () => {\n    context.hideLoading();\n  };\n  const { mutate: deleteMutation, isLoading: isDeleting } = useMutation((taskId: number) => deleteTask(taskId), {\n    onSuccess: onSuccess,\n    onError,\n  });\n  const { mutate: toggleMutation, isLoading: isToggling } = useMutation((taskId: number) => toggleTask(taskId), {\n    onSuccess: onSuccess,\n    onError,\n  });\n\n  return (\n    <ListItem\n      button\n      disabled={isToggling || isDeleting}\n      onClick={() => {\n        context.showLoading();\n        toggleMutation(task.id);\n      }}\n    >\n      <ListItemIcon>\n        <Checkbox edge={'start'} disabled={isToggling || isDeleting} checked={task.done} disableRipple />\n      </ListItemIcon>\n      <ListItemText primary={task.description} style={{ textDecorationLine: task.done ? 'line-through' : 'none' }} />\n      <ListItemSecondaryAction>\n        <IconButton\n          edge={'end'}\n          onClick={() => {\n            context.showLoading();\n            deleteMutation(task.id);\n          }}\n          disabled={isDeleting || isToggling}\n        >\n          <Delete />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n","import { Button } from '@material-ui/core';\nimport { Brightness4, Brightness7 } from '@material-ui/icons';\nimport { Component, ContextType } from 'react';\nimport { ToDoContext } from '../context/ToDoContext';\n\nexport class ThemeToggler extends Component {\n  static contextType = ToDoContext;\n  context!: ContextType<typeof ToDoContext>;\n\n  render() {\n    return (\n      <ToDoContext.Consumer>\n        {(context) => (\n          <Button onClick={context.changeColor} startIcon={!context.isDark ? <Brightness4 /> : <Brightness7 />}>\n            {!context.isDark ? 'Light' : 'Dark'}\n          </Button>\n        )}\n      </ToDoContext.Consumer>\n    );\n  }\n}\n","import { LinearProgress, List } from '@material-ui/core';\nimport React, { useContext } from 'react';\nimport { useQuery } from 'react-query';\nimport { Box, Flex } from 'rebass';\nimport { getTasks } from './api';\nimport './App.scss';\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskCreator } from './components/TaskCreator';\nimport { TaskRow } from './components/TaskRow';\nimport { ThemeToggler } from './components/ThemeToggler';\nimport { ToDoContext } from './context/ToDoContext';\n\nconst Container = (props: any) => <Box {...props} height={'100%'} overflow={'auto'} />;\n\nexport const App = () => {\n  const ctx = useContext(ToDoContext);\n  const { isLoading, data } = useQuery('listTasks', getTasks, {\n    staleTime: 60 * 1000,\n    onSuccess: () => {\n      ctx.hideLoading();\n    },\n    onError: () => {\n      ctx.hideLoading();\n    },\n  });\n\n  const taskRows = () => {\n    return (data || []).filter((t) => (ctx.showCompleted ? t : !t.done)).map((t) => <TaskRow key={t.id} task={t} />);\n  };\n\n  const uncompletedTasks = () => {\n    return (data || []).filter((x) => !x.done).length;\n  };\n\n  return (\n    <Container style={{ ...ctx.theme }}>\n      <TaskBanner uncompletedTasks={uncompletedTasks()} />\n      <Flex width={['100%', '90%']} flexDirection={'column'} mx={'auto'} p={3}>\n        <TaskCreator />\n        <LinearProgress\n          variant={'indeterminate'}\n          style={{ visibility: ctx.isLoading || isLoading ? 'visible' : 'hidden' }}\n        />\n        <List>{taskRows()}</List>\n\n        <Flex justifyContent={'flex-end'} mb={3}>\n          <ThemeToggler />\n        </Flex>\n      </Flex>\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// @ts-ignore\nimport preset from '@rebass/preset';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport { ToDoContextProvider } from './context/ToDoContext';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nexport const theme = {\n  ...preset,\n  ...{\n    colors: {\n      ...preset.colors,\n      primary: '#2196f3',\n      success: '#4caf50',\n      danger: '#f44336',\n    },\n    buttons: {\n      ...preset.buttons,\n      danger: {\n        color: 'white',\n        bg: 'danger',\n      },\n    },\n  },\n};\n\nconsole.log(theme);\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <ToDoContextProvider>\n        <ThemeProvider theme={theme}>\n          <App />\n        </ThemeProvider>\n      </ToDoContextProvider>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}